#!/usr/bin/env ruby

require 'onix3'
require 'optitron'

class Runner < Optitron::CLI
  
  desc "Comment an onix 3 file"
  # arg "file", "The file to comment"
  def comment(onix_file)
    File.open(onix_file, "r") do |file|
      p = Onix3::Parser::Divider.new(file)
      puts p.document_start
      c = Onix3::Tools::Commenter.new
      p.each_product do |product|
        puts c.comment(product)
      end
      puts p.document_end
    end
  end

  desc "Update the code lists with an XML description file from http://www.editeur.org/14/Code-Lists/#code%20lists"
  # arg "file", "The XML file with lists data"
  def update_code_lists(code_list_file)
    Onix3::Tools::CodeListUpdater.new.update_with(code_list_file)
  end

  desc "Extract a product definition from an onix 3 file"
  # arg "file", "The onix 3 file"
  # arg "identifier", "Identifier of the product to extract"
  opt "comment", "Comment the returned file", :type => :boolean, :use_no => true
  def extract(onix_file, product_identifier)
    File.open(onix_file, "r") do |file|
      p = Onix3::Parser::Divider.new(file)
      puts p.document_start
      c = Onix3::Tools::Commenter.new
      p.each_product do |product|
        if product.index("<IDValue>#{product_identifier}</IDValue>")
          puts (params["comment"] ? c.comment(product) : product)
        end
      end
      puts p.document_end
    end

  end

=begin
  cmd "count", "Count products in the onix 3 file" do
    arg "file", "The onix 3 file"
  end
  cmd "list", "list product identifiers in an onix 3 file" do
    opt "types", "list of identifiers types to report", type: :array
    arg "file", "The onix 3 file"
  end
  
=end

end

Runner.dispatch
